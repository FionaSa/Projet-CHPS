import pytest
import DNA_bin
import array
import moduleDNA as m
import ctypes

int_SIZE = 31

###### Verify if C extension in Python is working #####


def test_get_binary_value():
	# Test if the algorithm is OK
	# 1 = 0000000000000000000000000000001
	assert 1 == DNA_bin.get_binary_value(array.array('l', [1]),0)
	# assert leading 0
	assert 0 == DNA_bin.get_binary_value(array.array('l', [1]),17)

  	# Pour chaque binaire de 00000 à 11111, vérifier chaque bit.
	for i in range(32):
		seq_bin = array.array('l', [i])
		assert i%2 == DNA_bin.get_binary_value(seq_bin,0)
		assert int(i/2%2) == DNA_bin.get_binary_value(seq_bin,1)
		assert int(i/4%2) == DNA_bin.get_binary_value(seq_bin,2)
		assert int(i/8%2) == DNA_bin.get_binary_value(seq_bin,3)
		assert int(i/16%2) == DNA_bin.get_binary_value(seq_bin,4)

def test_change_binary_value():
	# Test if the algorithm is OK

  	# 85 = 1010101
	seq_bin = array.array('l', [85])
	# Invert values of seq_bin
	for i in range(0,7): DNA_bin.change_binary_value(seq_bin, i, i%2)
	# 42 = 0101010
	assert 42 == seq_bin[0]
	# Invert back values of seq_bin
	for i in range(0,7): DNA_bin.change_binary_value(seq_bin, i, int((i+1)%2))
	assert 85 == seq_bin[0]

def test_set_binary_array():
	# Test if the algorithm is OK

	assert [85] == DNA_bin.set_binary_array("CCCC", 4)
	assert [170] == DNA_bin.set_binary_array("GGGG", 4)

	assert [255] == DNA_bin.set_binary_array("TTTT", 4)
	assert [0] == DNA_bin.set_binary_array("AAAA", 4)
	assert [0] == DNA_bin.set_binary_array("AAAA", 4)

	seq_char = "GACCTTCGAGACCTTCGAGACCTTCGAGACCTTCGAGACCTTCGA"

	resbin = DNA_bin.set_binary_array(seq_char, len(seq_char))
	assert resbin == [2101911378, 172292753, 4029142153]

def test_xor_binary_array():
  	# Test if the algorithm is OK
	# 00000 xor 11111
	assert [0] == DNA_bin.xor_binary_array(array.array('l', [31]), array.array('l', [31]))
	# 11111 xor 11111
	assert [31] == DNA_bin.xor_binary_array(array.array('l', [0]), array.array('l', [31]))
	# 1010101 xor 0101010
	# res = DNA_bin.xor_binary_array(array.array('l', [42]), array.array('l', [85]))
	# print(res)

def test_popcount_binary_array():
	# Test for all binaries from 00000 to 11111
	for i in range(0,32):
		popc_expected_result = int(i%2) + int(i/2%2) + int(i/4%2) + int(i/8%2) + int(i/16%2)
		popc_result = DNA_bin.popcount_binary_array(array.array('l', [i]))
		assert popc_expected_result == popc_result

	# 9350764 = 001101100111010101110001
	assert 13 == DNA_bin.popcount_binary_array(array.array('l', [9350764]))

def test_mask_binary_array():
	assert 10 == DNA_bin.mask_binary_array(203, 1, 4)

def test_get_piece_binary_array():
	# pow = 2
	# arr = []
	# for i in range(10):
	# 	arr.append(pow-1)
	# 	pow = pow*2
	# print(arr)
	# input()
	# arr = array.array('l', arr)

	bin = array.array('l', [1078174047, 2571083936, 3619103677, 3992588806, 3586999, 2748724947, 3822470982, 432047646, 3552784286, 575703153, 3705565623, 666292733, 1874426200, 588134670, 2783443510, 486615412, 2077631154, 2434858842, 68653328, 972926460, 325360122, 996071207, 582004317, 3172274407, 507919812, 898635642, 596599544, 4241490103, 280823638, 956160384, 2642583440, 4119765864, 1488892908, 1156072221, 2257815494, 3424935281, 3177117166, 2390773085, 2234601323, 4094508795, 2424505102, 3603241141, 2588903205, 4176484773, 1648993071, 2662951109, 34077828, 2283413849, 1425780248, 389429783, 2259199037, 1641657250, 3379426320, 2907288982, 4149462754, 2835385455, 3949886848, 4197844157, 1255163711, 275289557, 1840565817, 1489340480, 2436560626, 268812065, 303809229, 2155354106, 4092600346, 626361322, 2960125975, 4266623466, 3273077889, 168564692, 2110198, 1509638429, 3989435853, 2402795522, 337316656, 3896487374, 482050759, 2409651573, 2090504730, 3617767549, 2501570544, 335976417, 2188693870, 3611994023, 2952854509, 2676015863, 300681340, 2840008901, 2532803888, 3092799925, 2085620511, 3478995400, 2331864886, 2666520025, 281394878, 360295900, 4133711429, 404616290, 3313233540, 1161899984, 4154786992, 1593358944, 2281703296, 2553845239, 66368573, 3460568546, 3698064511, 36681431, 3492528086, 2036322324, 67618307, 497948638, 2749382595, 141295936, 710376, 2038499421, 3250944180, 1743534051, 1753692635, 2457329539, 1180136183, 62292216, 4290362116, 431149122, 3266458823, 1514041484, 1303572946, 1169723353, 4094743403, 1823836028, 322627663, 4158560195, 3784364250, 4220115509, 47120848, 3955922405, 571200504, 2000765380, 2451824446, 131990878, 3142612789, 3554543069, 1417396298, 1199652919, 2223500834, 3789472251, 3227189184, 2010883511, 4055936700, 2691542023, 1057702074, 2407403148, 3165127187, 527892664, 3491792986, 3134777729, 134305284, 1360984989, 291456008, 285769153, 537648888, 1753382493, 4048371976, 1904604865, 1569111740, 170256255, 3666898867, 940802624, 939661037, 1782032792, 17740353, 975432256, 1095166368, 1979621185, 590270764, 10436828, 622641902, 4229324421, 676201263, 2275110981, 3604150348, 3550593289, 3804261735, 903830372, 3270397, 3116532101, 1158927147, 2449045701, 917736161, 2548541081, 1066118626, 103017848, 3011477235, 2823906350, 189505666, 1573979152, 2348237253, 1501590940, 3358397682, 2691958142, 1538246132, 1055765992, 102793730, 1205309526, 69087940, 1082382296, 1093187689, 3731464336, 305118224, 4246605472, 3360767242, 2082055231, 3770153154, 4123263481, 758992577, 31609048, 733758984, 486545568, 4021162051, 4253205321, 2729509840, 2890981237, 221676291, 2618133344, 3035810672, 1616255596, 1161476111, 3342991223, 1248261892, 2283290358, 2667266134, 35602804, 1106322399, 2665234437, 1640234020, 933690378, 3055350726, 2531098596, 266277685, 105347057, 3602925182, 1844407418, 3410877440, 155450856, 4253204655, 1547764480, 70215456, 3192226822, 2212538309, 23618567, 199357729, 1493303558, 3624337539, 2667845596, 137065488, 37420058, 668200768, 1700913758, 102855159, 1872621195, 775361265, 3214935047, 1571949772, 1708511199, 4003595327, 2104940710, 1744884587, 94801238, 4253063378, 137216017, 1158467332, 2500809383, 4111723267, 1962987844, 2220884955, 123726704, 2084887635, 3147567457, 33958879, 3218741335, 36107227, 282627076, 251760987, 366853512, 4264648753, 120625568, 15968307, 2514306057, 4040928498, 3834248863, 3778756864, 4077402600, 4097891472, 2170584558, 381761213, 572366550, 184288642, 2580788293, 3087496965, 3690735327, 3677177814, 1483157661, 1602043343, 3244957723, 539967428, 695068910, 2117894349, 2940360441, 1304857860, 2221213631, 780679171, 664389402, 1161150844, 1972480449, 802452289, 4196671198, 3767058290, 3708262993, 76419151, 2290854008, 1662172128, 1012294232, 1090907128, 2660325727, 3000238927, 2818898019, 2193887246, 4135557791, 315294941, 3026153855, 290273345, 4279952795, 3964571297, 2721586737, 1392687104, 2673376264, 855887348, 3580371344, 3474671037, 4152408609, 806751202, 3095195048, 3356703990, 51418549, 3680548816, 2660097147, 3283408416, 4050940049, 143635172, 4154967425, 1057337607, 67165945, 3874197693, 1955978880, 274007174, 1103892957, 3484855374, 4196406907, 264321538, 2567948154, 247174660, 3858799046, 2023818324, 3647463363, 498406502, 1661444453, 1861549134, 2510451057, 918259004, 2355503206, 4101244941, 2647803447, 4141880275, 988809604, 904415823, 2617196800, 333512769, 671492220, 2936225068, 662666692, 3772067587, 108650645, 1943995520, 3231761443, 4027903858, 671278632, 423833560, 534617596, 3273912348, 1500291198, 3505917178, 3665891390, 64520510, 1522530426, 3140399150, 434497224, 3713078087, 454296604, 1410092988, 1600348126, 51185345, 8494219, 21949267, 4065419197, 17874452, 237108472, 3551659906, 3432268112, 3694310235, 462441632, 548894776, 1803573002, 3833627847, 1569157496, 1870811968, 1516734740, 875567184, 3290923039, 2182179816, 2425804315, 3017261347, 4011335273, 889338924, 1897635102, 1409479535, 2136533356, 3099848023, 1721325452, 1624980533, 4027087869, 886066750, 488799330, 3824915471, 2629199750, 3477032927, 3080576521, 4282614324, 4161304646, 3697297772, 3328803072, 2213361592, 2139213935, 4236092016, 2747366982, 3020816324, 2115626501, 1626558462, 1542744959, 4047623024, 1845350907, 3273912542, 3637944058, 2905638991, 3872504343, 3962846417, 2795558557, 1396170991, 2078268764, 4260511560, 4021185031, 3226259491, 2142830120, 1829751472, 2381442431, 2175794872, 2577661689, 3897478655, 1468062558, 1819803376, 2601370495, 1069826959, 3984315865, 1009841116, 3045104714, 2899869455, 4220115038, 4093407668, 2667599477, 305917038, 1088676319, 3555642171, 147087816, 275523464, 2186837478, 4221925896, 3657199003, 3903616640, 2688008329, 4010472510, 3798326747, 328119871, 3244672919, 519342229, 2751593508, 1263366192, 2384969456, 3763321035, 1546638864, 389010423, 25169755, 1025787915, 3149790779, 4097724488, 1816494616, 2122372540, 2106038726, 246611740, 2216124419, 1639979894, 4036657004, 1350284248, 2221536921, 1978547304, 2512805245, 2789088224, 1612634495, 1044905548, 2699151487, 2887021568, 1753219964, 2182825005, 2214820317, 2957571447, 3891949135, 2175230338, 2432269821, 839073934, 3351086583, 117903855, 1486816354, 1799601714, 1749695334, 1127231360, 2518774440, 3956559606, 497406775, 3284955238, 816271, 3211726924, 1081902430, 3740396658, 538077216, 1533950256, 1201767424, 1414258943, 1955702403, 3765416187, 139224066, 255867626, 2111921688, 405748798, 2314214878, 4026365659, 3875510663, 531959931, 1644623386, 772275488, 1083786809, 1857735629, 3428998376, 3337930829, 4253550701, 3057929212, 4250349809, 987812670, 39366124, 3166468205, 1082529540, 2667553627, 3602379848, 73724685, 2146006403, 2295658487, 3619910141, 1146074896, 2443083832, 2264739091, 2178804792, 3211537846, 2186871295, 3747633210, 1654482910, 3242992462, 3690203063, 1065399641, 2089325942, 1797987639, 3213092742, 198497346, 3608278781, 1596978192, 1221712497, 2759900113, 234739393, 3996005596, 2445404629, 739382223, 2679763266, 2933862971, 3765880743, 4214281491, 2212602266, 737602353, 431539079, 4013615968, 2289159789, 2094226390, 3494376537, 2227366909, 3233269603, 1062027084, 3955483609, 1322532791, 4037141415, 3040694254, 3889944487, 3300734783, 2518317565, 1178598732, 4120232921, 2413053923, 563462056, 2087927228, 1275211751, 3346971871, 470198151, 578675641, 1482665975, 3548389567, 3010308317, 1056907312, 3117948673, 3415106414, 2666166284, 1284256527, 409464540, 3825000514, 2187681988, 1478628195, 1323556731, 1661433472, 2769192719, 2118090443, 2189953186, 3453323089, 3757430544, 37701296, 1848365085, 3198351027, 3899663709, 3509850947, 2069871897, 3036559655, 3111527433, 1149427014, 1200007291, 3072147232, 3448642497, 4028709623, 3603447649, 2825989071, 1727625219, 1027277784, 643782700, 1149457933, 4159726643, 1242832712, 2109996940, 4206968561, 2682089000, 1756589761, 2275032962, 2163601914, 1495103039, 4214296570, 2031056534, 4285973755, 2560663061, 725707902, 1110803578, 4245586611, 1602201922, 73466118, 2303317696, 3286318294, 2010624508, 1087354585, 1607942725, 3511667137, 161843130, 256749301, 3242565129, 3712254224, 2106091913, 3712644831, 362812126, 3431986926, 7928289, 2885792819, 701061190, 4256754420, 2115387676, 1874001745, 3560661137, 3053551439, 874578012, 475075496, 1510189023, 4229242699, 4059836191, 1960992432, 4227323903, 2953525237, 3086654809, 921947771, 1625288089, 822210528, 3686763917, 1967063023, 3520736750, 3602059251, 1830513510, 2943589166, 2522439512, 4207381810, 1541194239, 1208176571, 3815202224, 888899420, 50947489, 3408719418, 1997620933, 2064334103, 436005012, 1135408120, 1258525179, 3345673311, 2021505926, 2099368771, 501063839, 4212266687, 2043766783, 800807886, 3219554703, 1278923252, 3630657990, 4160474984, 3923769757, 4149935415, 2994972661, 1563239412, 3348529013, 3494174691, 359031935, 4031588881, 730206250, 2355133804, 2208424056, 3133041583, 3735027769, 3025724947, 1031826788, 3295544161, 1000848476, 486808562, 3101918321, 1104853952, 1109902071, 3325943570, 408578448, 1479540927, 4284217960, 3219572221, 3711968374, 2164469501, 3053715605, 1349128271, 3944329488, 4118691653, 4211972311, 136164566, 3678606969, 1596895451, 1081866177, 125313214, 1568781784, 758010620, 227675531, 4164100106, 3853870784, 3226747086, 2444498011, 1780499968, 1841732662, 4285272657, 3225925207, 3518153505, 552044576, 1051861100, 3632655101, 17102675, 811704364, 3193050311, 2252347784, 3838110510, 4169193961, 3323726523, 137234301, 840638478, 3896473969, 2900606980, 2115669900, 3170327235, 3037195296, 1081830896, 3428344073, 4112248184, 628873481, 3675475606, 2157590454, 1260452272, 1777076354, 704739898, 3734888296, 1059439777, 3582032966, 3792527154, 2591400283, 181437637, 3755073185, 55644691, 274466493, 869258047, 10519013, 57358883, 2051833629, 1169389880, 1812477469, 3766752982, 1748900327, 1860163327, 1838274587, 538171471, 1439090373, 219943959, 3747880821, 1320436814, 2288046325, 2239927375, 2148546905,
	3611749295, 3705304823, 4183961878, 775428832, 4280827182, 121636711, 892344129, 2518381930, 1157606159, 3686932489, 3974739858, 3680105477, 1560751864, 263596563, 2166041991, 3779600380, 4265098150, 2965937906, 2610194502, 2803486565, 2823572477, 2188247141, 4208517999, 28278888, 3656367127, 307233796, 3158246580, 4057966525, 1607537184, 3592464006, 13615362, 4185473513, 386101174, 1485864698, 603169932, 3592708649, 3832766017, 1617549346, 1965139166, 874493438, 3282088507, 1075716672, 1279769904, 1499848568, 794575, 1608883561, 3810611208, 2569433895, 84982333, 2648682540, 65031696, 1996055257, 1812544747, 2648168598, 473052616, 2715159669, 782224255, 3365938690, 1602937763, 3888007037, 1527757948, 2306508697, 297025386, 278386831, 3026194676, 2660593784, 4022520835, 602476805, 1077824503, 4269578625, 566932785, 3724714109, 2998907908, 2378053207, 2969371063, 1889255037, 2014531935, 3318123095, 586937088, 1507822583, 4165774599, 3901146179, 4222028878, 3644890753, 3716943688, 1350556280, 3678123190, 913156530, 3282957901, 543451587, 536274134, 444217028, 134069953, 489292762, 85987583, 3178101337, 2071460483, 1104134465, 800342076, 3203993311, 246560475, 3838024281, 1047741891, 3626017885, 3494409012, 99737503, 4108372963, 1972534757, 229700534, 2163445506, 297814228, 2985869301, 807463600, 1188461050, 130207627, 240231268, 3330211916, 4129069752, 1949516480, 2619269165, 538677004, 1921838156, 3705532086, 2190895557, 29882440, 14704248, 841172374, 3313966502, 729548292, 1502140375, 2969780239, 436018583, 3573567313, 1442139038, 3417322888, 2288738797, 1523517511, 997980035, 3997249795, 680491805, 1492267903, 1089330264, 3804281020, 1039456118, 3511697100, 1947089541, 579142747, 1739965979, 268336113, 1034945234, 1816053748, 1705436189, 633078019, 3771455943, 1061700627, 295419332, 1153353868, 92659620, 3824359743, 3426482305, 741831883, 2455625581, 535024012, 3101277443, 918028486, 132669199, 1942999296, 1744789871, 4211105866, 3931784585, 2983501872, 2285615097, 1090050820, 377054676, 3041877843, 1099173422, 896378282, 3754845585, 14920836, 2659747301, 3120194551, 3642329758, 55526769, 1900250550, 3354899055, 2307029569, 3407044642, 2291409393, 1597706814, 1483337119, 646050883, 3854936149, 1060845195, 2291934770, 332578522, 2008342463, 300959698, 1984028381, 2387371796, 2010770784, 345238907, 2384520728, 2078161923, 4254906493, 1048959750, 3717238629, 601093149, 1369118324, 4080081934, 673127978, 3320896443, 156852220, 859771648, 3621624113, 3036349428, 931357064, 78458476, 3799610783, 995167621, 3960377365, 1678270911, 2488953859, 2276724676, 2023455190, 993452217, 1539802178, 4145031879, 494703016, 4098949712, 4016543143, 1000140852, 3228598281, 1310886996, 1560287194, 4218206918, 2188659324, 1089475536, 1609013087, 3809592502, 136195463, 1851999444, 2336656448, 2411115760, 2792941698, 1999659720, 834656216, 485496448, 57105520, 390389546, 1775674013, 1878123011, 3148983673, 498586932, 3425072920, 4120299382, 4124681061, 574635112, 2118534763, 990179470, 916798322, 3795536894, 65034332, 2400220688, 3757008233, 1864041261, 2428651801, 3002986368, 584454112, 952052976, 3641401591, 860229049, 3628955805, 3579113590, 2740422856, 3503572640, 2702829072, 520556270, 377117088, 1214154732, 2048190799, 3680434434, 3659921285, 3488347874, 3229287960, 470057156, 8312891, 3282580478, 2103807118, 2131691228, 3499384866, 3952591392, 2313792028, 2331391488, 4194033315, 300992194, 246536592, 1397407568, 3858137283, 567968884, 2566285669, 756287303, 398080776, 935870700, 2225576829, 2283419649, 3919414839, 852751650, 39444703, 2014539823, 1193465697, 1339056992, 567805076, 4060346126, 2743550421, 1154946016, 3928123956, 1087451064, 3745605635, 892415931, 1481665123, 2971700436, 2392218043, 4289137408, 3236296071, 1129598956, 1286130704, 3296933454, 1582707963, 2854728315, 1147778576, 3243163351, 1187151525, 2074163199, 1198387624, 1408039443, 1684113058, 560076799, 1909073947, 2909258184, 2718181774, 993872385, 1471123928, 54114034, 526394460, 4002167, 1010981767, 1791982580, 1595403616, 2095100785, 3394338909, 3069923736, 1841895798, 370671025, 3063843087, 3603023550, 3875036821, 3729725196, 3852459877, 2869171198, 1780287490, 1925514811, 2344679317, 2395237429, 3772348356, 233737516, 3681624822, 4076574782, 1751218597, 3612061452, 2706929925, 3663856187, 553483618, 3624891334, 151800568, 1205831442, 446813616, 1001929845, 1197846552, 3409436838, 1551346720, 806155777, 431913025, 1997608655, 1829304329, 2893241147, 1474134904, 2358621644, 797302750, 801638609, 1852688296, 2909749999, 4040644727, 271596315, 170012571, 1845545975, 2155749244, 939463920, 2344770471, 3266436654, 4048642, 844025635, 1753668544, 999547971, 2114772340, 997934866, 370885671, 2647586668, 1703437753, 1064001910, 41899842, 869478340, 4270348009, 2022167044, 3738656785, 4039176112, 1364819593, 70790817, 3265149375, 1124155316, 3221845399, 992967618, 403032096, 4216570800, 2977837407, 1100494396, 1117530132, 3251830960, 2304628217, 994850523, 1076270446, 2220979912, 1635362534, 3997906927, 629211846, 1095181323, 2380112802, 4292754123, 1710297149, 4090638371, 1640683997, 557643624, 4094155847, 2746684439, 4054851624, 1897802511, 1555055992, 69174336, 2649755751, 2990636014, 2015265130, 1061216797, 2114314498, 352520074, 3763736549, 2399728333, 3823199365, 2399353376, 334194370, 2328880948, 253293053, 1899998863, 2443540841, 3531865664, 3789651880, 139972594, 1449068994, 1073793011, 3641247756, 3699273440, 3690415591, 4109628594, 2172517473, 3356868687, 469530324, 3537903348, 2164890205, 802897695, 3635777565, 3846161416, 141429216, 508586904, 1963681503, 3694329935, 269253046, 3087170891, 1736443485, 4043759828, 1482899478, 805731155, 2212339929, 1136935156, 1722407708, 322839244, 2413223295, 2982029324, 704037492, 258977298, 646820469, 2666907772, 2518478718, 2261471356, 3751271909, 1322278988, 1477995749, 3102984012, 111748937, 83558448, 115957776, 1954545314, 1207269346, 909508673, 3117151319, 3658532876, 555243454, 3412462845, 1446592137, 2930865540, 444449142, 477737143, 2281582679, 4147919642, 556935168, 2067706420, 2313172533, 319433724, 398713016, 1962799967, 2105656713, 1594081525, 1968830170, 4259742208, 940402264, 1945910775, 1946617764, 574369856, 2112948478, 3753042811, 1209665608, 2147220231, 1756864500, 998739422, 3263331207, 626323572, 3640158360, 2138811972, 2042635690, 2145416648, 670885950, 3173536735, 4290747778, 2126329265, 4016203094, 3551269920, 2825256214, 3287371122, 3756521304, 1577628767, 1292919176, 3008282610, 3896589895, 357518686, 2110370328, 3962584315, 1995444193, 251610571, 1971314303, 1130561, 1499398401, 3793718095, 1631001560, 817877427, 4289477564, 549276367, 1602703488, 279508736, 4186185693, 3158298540, 1611406310, 1682424781, 3452219109, 4203174527, 675792734, 96412579, 2743630289, 1339039599, 3239616391, 3134671860, 1598287805, 115060100, 3747047326, 3299037309, 4167048815, 3276844034, 2651286928, 3978637126, 4008183824, 2478338095, 3661529105, 3452077313, 530693361, 138494263, 3214014342, 3170974915, 3245735597, 558207231, 2583541983, 1644826799, 292979470, 1869476811, 2597109273, 4056413279, 4144329049, 1299648259, 3147171821, 934335003, 502855966, 3769821217, 196313237, 3356151827, 1736866156, 2092045552, 3656609033, 2218246845, 2164717947, 3191063470, 2652445146, 1068555786, 62414826, 841109631, 2608941891, 1147380669, 400384500, 3555659615, 2564857749, 877926388, 175996372, 238585029, 3361730537, 4128533581, 2158327798, 54742496, 3619692551, 2075461616, 1480394879, 3896921982, 465928194, 3604996191, 226363537, 3509435444, 1555936846, 2345738516, 2725812156, 1806694380, 1108997903, 1464599592, 1835922472, 3748438479, 2715553933, 3981737179, 3828721568, 3174399718, 163464957, 536789264, 4140883335, 280406139, 1715079185, 3310111667, 912737141, 488755085, 330233961, 1673061482, 2967658737, 3161248053, 3904914293, 2277986159, 2249776750, 355565313, 3348777597, 2080915539, 2778455104, 4063785294, 3750352917, 3268443318, 2113855681, 2145496257, 1242006055, 3828040694, 3292562934, 17306896, 4279173687, 67110140, 2726887904, 3959164922, 603954784, 388055047, 271591485, 3358539597, 3227582341, 3676421394, 1619059692, 1809249003, 1148041113, 611253365, 11831280, 1330737147, 3750072462, 3406086619, 1872788899, 1319531632, 1473697770, 1854334747, 2321556703, 1795273551, 1971844190, 138737827, 2702601980, 96254976, 2378571650, 813433263, 2428436110, 2218597249, 22429946, 515293204, 2954922015, 1056338960, 2196528511, 133195758, 3864534522, 318214496, 1885029827, 799223559, 262419488, 856824824, 3252716453, 4094193032, 203124657, 4144188854, 4127684368, 735052225, 1594980350, 1778539635, 3956917163, 3563185841, 4022105485, 2067607093, 268699866, 3614246006, 1499717513, 1475626496, 3753758812, 3829837855, 2693298165, 2150432706, 2315903872, 557302849, 1869994525, 4021422640, 553095304, 1555296703, 504799465, 681606206, 2140674320, 1371850496, 1954439013, 253418948, 2155332589, 386007071, 2501250738, 3188703749, 370380526, 1573057568, 2617536709, 3224579162, 1602870555, 3056857846, 1904965976, 1827687231, 3264640727, 502238928, 3741185749, 1080931786, 3662218647, 3497451874, 1076330737, 1329742020, 1736964069, 146018807, 2707290653, 2172809262, 3058703081, 3217584543, 551185561, 3590637905, 1498409691, 3194744625, 4292574185, 6252065, 2148444259, 2251561672, 2715631803, 1195491263, 3080707965, 283407614, 4271996141, 1802330301, 3219823515, 1064105182, 283048039, 552587276, 2127651213, 1812650993, 3802137341, 1097642996, 2511859705, 289337555, 2783602553, 75304675, 260695006, 2716932811, 4028743578, 742531405, 4124546713, 717226716, 2751579613, 2219785039, 2755563417, 1961723184, 163963113, 280947524, 2566646397, 3619422980, 2484099781, 2970742807, 3768122660, 2320876527, 1640071813, 2999915088, 2794608433, 2210353169, 2623106180, 3343830887, 608260052, 1043396916, 4290682053, 1320811965, 3365870459, 919852822, 2967330383, 1316161243, 526315890, 15203829, 2133160890, 3222240301, 3295643055, 2061463811, 3859187097,
	3992970031, 2139613260, 399010580, 4070468049, 1610864770, 2237695467, 1206436749, 2908912377, 4060405627, 3750243738, 3263627240, 2254708487, 1979677547, 3268829089, 4290611054, 2133701698, 1924926484, 2608355155, 4156402710, 3050928965, 1539822433, 3755623419, 1635673318, 3638622453, 559878352, 1004154312, 2891152593, 2426695602, 771886708, 1817414551, 314175991, 2511838248, 3058317131, 3667136026, 3978037251, 3360219756, 1880346495, 1393359637, 2983389283, 3499678591, 2017239350, 2202132582, 2218811156, 3273496613, 1876624623, 633461000, 1998578878, 2672031846, 1019774477, 2488919966, 4051665139, 2313547285, 1892110385, 1349418496, 1929950260, 2166230777, 742474120, 1162354270, 3290905602, 3220007127, 3507254489, 4212611641, 3095478523, 136791463, 1350582127, 2287401865, 1374710308, 1819195645, 1371472140, 1221062121, 1975507952, 3698542955, 1080151524, 3385910317, 1207415821, 1133269250, 2180534224, 3770392319, 2801516737, 564125178, 487716352, 1480736862, 3284661283, 3078516645, 1535072511, 1484775102, 937227227, 1545053119, 1831913248, 2690304247, 604439236, 4156377023, 477117249, 4175102115, 4176225811, 245206242, 2395754543, 2943526297, 936244336, 1897817944, 117476746, 3630047144, 3062573915, 1487110591, 4048143585, 1312974727, 1608995323, 2189211527, 3559402432, 3740390257, 2122248371, 1207865756, 3890524478, 2414116827, 872686592, 1444507488, 159842389, 126659126, 2538909375, 1091397694, 1124641825, 210029911, 7773761, 1084762751, 3540794854, 3393145070, 1796239520, 3766129067, 1746045310, 169992326, 1260484705, 698800001, 612709920, 158717758, 2803903491, 970342588, 4230173517, 1749815477, 3535188823, 565498432, 3004958458, 353797611, 21283272, 2832697356, 70702939, 2608038720, 1115805648, 3019945865, 176298295, 3284356368, 2247745397, 953097358, 275783806, 2697137419, 2833637186, 1197038424, 2596363054, 3082507999, 318165746, 397451313, 987676704, 136348372, 880492624, 383479301, 1971457526, 379355149, 1347182644, 3657105953, 1763159624, 553976480, 4278326442, 2256863811, 3410104339, 852987360, 1542473237, 4077891835, 1719339580, 2399494984, 2923603927, 3708328596, 1261158513, 266350144, 130515400, 3697477142, 792728345, 3187941538, 224400000, 1090623184, 486690648, 2433516560, 1080100027, 1810872539, 749717631, 3725069184, 2251054099, 1134618989, 565301301, 2567766562, 2811245366, 4261199852, 609084211, 2072347703, 2009353486, 147183900, 3505944335, 207751150, 4007773968, 3913634821, 3293667967, 3367258644, 3097269123, 1837242120, 861626922, 2557133845, 3891326990, 3299580785, 3965915122, 4018144337, 135104, 0, 0])

	print(len(bin), len(bin)*32)
	res = DNA_bin.get_piece_binary_array(bin, 59914, 59963-59914)
	print(res)
	# input()

	# bin = array.array('l', [2540182510, 460157938, 4024800258,68927767, 1534117274, 224949268, 2292463160, 1303060896,1530917382, 4106829719, 1709107644, 2250109104, 2713858441,595869243, 3791198350, 4257298544, 3793604945, 2159879256,2415429906, 3801683492, 3262583685, 2324541504, 90598253,62590296, 477232670, 1689982323, 4227858529])
	# res = DNA_bin.get_piece_binary_array(bin, 684, 17)
	# print(res)
	# input()

	bin = array.array('l', [7,568,511, 455])
	expected_res = array.array('l', [3,568,508])
	res = DNA_bin.get_piece_binary_array(bin, int_SIZE+1+2, 2 * (int_SIZE+1))
	print(len(res), res)
	for i in range(len(res)):
		print(f"exp : {expected_res[i]} | res : {res[i]}")
		# assert expected_res[i] == res[i]
	input()

def test_convert_to_binary():
	# Test if the algorithm is OK

	assert [85] == DNA_bin.convert_to_binary("CCCC", 4)
	assert [170] == DNA_bin.convert_to_binary("GGGG", 4)

	assert [255] == DNA_bin.convert_to_binary("TTTT", 4)
	assert [0] == DNA_bin.convert_to_binary("AAAA", 4)
	assert [0] == DNA_bin.convert_to_binary("AAAA", 4)

	seq_char = "GACCTTCGAGACCTTCGAGACCTTCGAGACCTTCGAGACCTTCGA"

	resbin = DNA_bin.convert_to_binary(seq_char, len(seq_char))
	assert resbin == [2101911378, 172292753, 4029142153]

def test_generating_mRNA():
	# Test if the algorithm is OK

	# assert empty
	assert b'' == DNA_bin.generating_mRNA(array.array('l', [0]))
	# 9350764 = 001101100111010101110001 - array size : 1
	assert b'AUGCGUGGGUAG' == DNA_bin.generating_mRNA(array.array('l', [9350764]))
	# 913666358 = 00110110011101010111000100110110, 30065 = 0111010101110001 - array size : 2
	assert b'AUGCGUGGGUAGAUGCGUGGGUAG' == DNA_bin.generating_mRNA(array.array('l', [1821290092, 18263]))
	# assert TypeError for not supported format entries
	with pytest.raises(TypeError):
		DNA_bin.generating_mRNA(None) # no entry
		DNA_bin.generating_mRNA(array.array('H', [12])) # array format double

def test_binary_to_dna():
	assert 0 == 0
	# Test binary to aa conversions

	# --- Test all conversion
	assert b'ATCG' == DNA_bin.binary_to_dna(array.array('l', [156]))
	assert b'ATGCGTGGGTAG' == DNA_bin.binary_to_dna(array.array('l', [9350764]))
	assert b'ATGCGTGGGTAGATGCGTGGGTAG' == DNA_bin.binary_to_dna(array.array('l', [1821290092, 18263]))

	# Test whether the function correctly detects errors:
	with pytest.raises(TypeError):
		DNA_bin.binary_to_dna(None) # no entry
		DNA_bin.binary_to_dna(array.array('H', [12])) # array format double

def test_calculating_matching_score():
	# Test if the algorithm is OK
	# --- With same size
	#  GACCCGAC = 0100101010010010 = {18770}
	#  GGCCAGGC = 0101101000010110 = {26714}
	assert 81.25 == DNA_bin.calculating_matching_score(array.array('l', [18770]), array.array('l', [26714]))
	# --- With different size
	#  GACCCGAC = 0100101010010010 = {18770}
	#  TTTCAGGCTC = 11111110000101101110 = {485503}
	assert 25.0 == DNA_bin.calculating_matching_score(array.array('l', [18770]), array.array('l', [485503]))
	#  TTTCAGGCTT = 11111110000101101111 = {1009791}
	#  GACCTTCGA = 1001010111110010 = {40786}
	assert 35.0 == DNA_bin.calculating_matching_score(array.array('l', [1009791]), array.array('l', [40786]))

	# Test whether the function correctly detects errors:
	# --- NULL error
	with pytest.raises(TypeError):
		DNA_bin.calculating_matching_score(None) # no entry
		DNA_bin.calculating_matching_score(array.array('H', [12])) # array format double

def test_generating_amino_acid_chain():
	assert 0 == 0
	# # Test if the algorithm is OK
	assert b'KKNNR' == DNA_bin.generating_amino_acid_chain(array.array('l', [146868224]))
	assert b'RSSTT' == DNA_bin.generating_amino_acid_chain(array.array('l', [605259304]))
	assert b'TTIMI' == DNA_bin.generating_amino_acid_chain(array.array('l', [481348884]))
	assert b'IEEDD' == DNA_bin.generating_amino_acid_chain(array.array('l', [843718844]))
	assert b'GGGGA' == DNA_bin.generating_amino_acid_chain(array.array('l', [115976842]))
	assert b'AAAVV' == DNA_bin.generating_amino_acid_chain(array.array('l', [775644582]))
	assert b'VVQQH' == DNA_bin.generating_amino_acid_chain(array.array('l', [293871518]))
	assert b'HRRRR' == DNA_bin.generating_amino_acid_chain(array.array('l', [963023473]))
	assert b'PPPPL' == DNA_bin.generating_amino_acid_chain(array.array('l', [232085829]))
	assert b'LLLOO' == DNA_bin.generating_amino_acid_chain(array.array('l', [588240749]))
	assert b'YYOWC' == DNA_bin.generating_amino_acid_chain(array.array('l', [464305363]))
	assert b'CSSSS' == DNA_bin.generating_amino_acid_chain(array.array('l', [928936443]))
	assert b'LLFF' == DNA_bin.generating_amino_acid_chain(array.array('l', [16645071]))
	assert b'MRGOMRGO' == DNA_bin.generating_amino_acid_chain(array.array('l', [1821290092, 18263]))
	# --- Test all the amino acid
	# assert b'KKNNRRSSTTTTIMIIEEDDGGGGAAAAVVVVQQHHRRRRPPPPLLLLOOYYOWCCSSSSLLFF' == DNA_bin.generating_amino_acid_chain(array.array('l', [146868224, 605259304, 481348884, 843718844, 115976842, 775644582, 293871518, 963023473, 232085829, 588240749, 464305363, 928936443, 16645071]))
	# assert b'KNKNTTTTRSRSIIIQHQHPPPPRRRRLLLLEDEDAAAAGGGGVVVVYYSSSSCWCLFLFMOOO' == DNA_bin.generating_amino_acid_chain(array.array('l', [79823872, -2096862942,
	# 	-1577991368, 547545866, -1792699787, -1126245655, 1210084514, -752012202, 1001024414, -106443080, -1380064261, -1612777443, 189184]))


	# Test whether the function correctly detects errors:
	with pytest.raises(TypeError):
		DNA_bin.generating_amino_acid_chain(None) # no entry
		DNA_bin.generating_amino_acid_chain(array.array('H', [12])) # array format double

def test_detecting_genes():


   #Test if the algorithm is OK in a basic case: xxxxAUGxxxxUAAxxx
   #The algorithm should detect one gene from the start codon to the stop codon

	assert 6 == DNA_bin.detecting_genes(array.array('l',[963808024, 42]))[0][0]
	assert 28 == DNA_bin.detecting_genes(array.array('l',[963808024, 42]))[0][1]
	assert 1 == len(DNA_bin.detecting_genes(array.array('l',[963808024, 42])))

  	#Test if the algorithm is OK in a non presence of "start/stop" case: xxxxxxxxx
  	#The algorithm should not detect any genes
	assert 0 == len(DNA_bin.detecting_genes(array.array('l',[22369621])))

	
	
	#Test if the algorithm is OK in a multiple "start" case: xxxxAUGxxxxAUGxxxUAAxxx
  	#The algorithm should detect one gene from the 2nd start codon to the stop codon
	assert 30 == DNA_bin.detecting_genes(array.array('l',[732875499, -2036213923]))[0][0]
	assert 48 == DNA_bin.detecting_genes(array.array('l',[732875499, -2036213923]))[0][1]
	assert 1 == len(DNA_bin.detecting_genes(array.array('l',[732875499, -2036213923])))
	
  	#Test if the algorithm is OK in a multiple "stop" case: xxxxAUGxxxxUAAxxxUAAxxx
  	#The algorithm should detect one gene from the start codon to the first stop codon	
	assert 10 == DNA_bin.detecting_genes(array.array('l',[250327787, -2022340747]))[0][0]
	assert 26 == DNA_bin.detecting_genes(array.array('l',[250327787, -2022340747]))[0][1]
	assert 1 == len(DNA_bin.detecting_genes(array.array('l',[250327787, -2022340747])))
	
  	#Test if the algorithm is OK in a multiple gene case: xxxxAUGxxxxUAGxxxAUGxxxUAAxxx
  	#The algorithm should detect two genes
	assert 6 == DNA_bin.detecting_genes(array.array('l',[-469763265, -1612578969, -268435456]))[0][0]
	assert 24 == DNA_bin.detecting_genes(array.array('l',[-469763265, -1612578969, -268435456]))[0][1]
	assert 36 == DNA_bin.detecting_genes(array.array('l',[-469763265, -1612578969, -268435456]))[1][0]
	assert 48 == DNA_bin.detecting_genes(array.array('l',[-469763265, -1612578969, -268435456]))[1][1]
	assert 2 == len(DNA_bin.detecting_genes(array.array('l',[-469763265, -1612578969, -268435456])))

	
def test_detecting_mutations():
  	#GGGTTGCGCGCGTTAAAGGTTTGAAAGGTG = {261725162, 97523700}
  	#Test if sequence 10 to 23 is a mutation zone and no other mutation zone
	assert 13 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[0][0]
	assert 10 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[0][1]
	assert 23 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[0][2]
  	#No other mutations, should not be updated
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[1][0]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[1][1]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261725162, 97523700]))[1][2]	  

  	#GTTTTGCAAACGTTAAAGGTTTGAAAGGTG = {261102590, 97523700}
  	#Test if no mutation in this sequence
  	 #No possible mutation zones detected, should not be updated	  
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261102590, 97523700]))[0][0]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261102590, 97523700]))[0][1]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[261102590, 97523700]))[0][2]
  	
	#GGGCCGTTCCGCCCATAGGCCCGGCTAAGA = {-983172758, 17224372}
  	#Test with 3 mutation zones in this sequence
  	#First mutation is updated with right values

	assert 11 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[0][0]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[0][1]
	assert 11 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[0][2]
  	
	#First mutation is updated with right values

	assert 11 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[1][0]
	assert 16 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[1][1]
	assert 27 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[1][2]
  
   #First mutation is updated with right values

	assert 15 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[2][0]
	assert 34 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[2][1]
	assert 49 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[2][2]


   #No other mutations, should not be updated

	assert 0 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[3][0]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[3][1]
	assert 0 == DNA_bin.detecting_mutations(array.array('l',[-983172758, 17224372]))[3][2]
  

